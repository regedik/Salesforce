public class UserViewController {
    
    public FeedbackWrapper feedbackWr { get; set; }
    public String openDay { get; set { openDay = value; showFeedbackView = false; } }
    public Date openDayDate { get; set; }
    public String lessonToFeedbackId { get; set; }
    public String lessonToFeedbackName { get; set; }
    public Boolean showFeedbackView { get; set; }
    public Boolean isAfterLesson { 
        get {
            return Date.today() >= openDayDate;
        } 
    }
    //
    public LessonWrapper lessonWr { get; set; }
    public DayWrapper dayWr { get; set; }
	public Map<DayWrapper, List<LessonWrapper>> mapDaysAndLessonsWrappers { get; set; }       
    public Boolean isNewTimetable { 
        get {
            return mapDaysAndLessonsWrappers.isEmpty();
        } 
    }
    //
    public List<SelectOption> statusOptions { get;set; }
    
    private void getPicklistEntries() {
        statusOptions = new list<SelectOption>();
        
        for (Schema.Picklistentry picklistEntry : Feedback__c.Comprehension__c.getDescribe().getPicklistValues()) {
            statusOptions.add(new SelectOption(pickListEntry.getValue(),pickListEntry.getLabel()));
        }
    }
    //
    public void doFeedback() { 
        Lesson__c lessonToDeleteObj = [SELECT Name, DayId__c FROM Lesson__c WHERE id=:lessonToFeedbackId];     
        Day__c dayOfLessonToDeleteObj = [SELECT Name, Date__c FROM Day__c WHERE id=:lessonToDeleteObj.DayId__c];
        
        showFeedbackView = true;
    }
    
    public UserViewController() {
        // Init
        openDay = '';
        showFeedbackView = false;
        lessonWr = new LessonWrapper();
        dayWr = new DayWrapper();
        feedbackWr = new FeedbackWrapper();
        // 
        populateOutputMap();
        getPicklistEntries();
    }
    
    public void doSmth() { }
    
    public PageReference addNewFeedback() {
        FeedBack__c newFeedback = new FeedBack__c(Comprehension__c=feedbackWr.comprehension, 
        		Description__c=feedbackWr.description, lessonId__c=lessonToFeedbackId);
        insert newFeedback;
        feedbackWr.clear();
        showFeedbackView = false;
        
        return null;
    }
      
    private void populateOutputMap() {
        mapDaysAndLessonsWrappers = new Map<DayWrapper, List<LessonWrapper>>();         
        List<DayWrapper> listOfDaysWrappers = dayWr.convertListOfObjectToListOfWrappers([SELECT Name, Date__c FROM Day__c]);
        List<LessonWrapper> listOfLessonsWrappers = lessonWr.convertListOfObjectToListOfWrappers([SELECT DayId__c, Name, CreatedDate FROM Lesson__c]);
        for (DayWrapper day : listOfDaysWrappers) {
            for (LessonWrapper lesson : listOfLessonsWrappers) {
                if (lesson.dayId == day.dayId) {
                    if (mapDaysAndLessonsWrappers.containsKey(day)) {
                        mapDaysAndLessonsWrappers.get(day).add(lesson);
                    }
                    else {
                        mapDaysAndLessonsWrappers.put(day, new List<LessonWrapper> { lesson } );
                    }
                }
            }
            
            mapDaysAndLessonsWrappers.get(day).sort();
        }    
    }
    
    public class FeedbackWrapper {
        public String description { get; set; }
        public String comprehension { get; set; }
        
        public void clear() {
            description = '';
        }
    }
    
    public class LessonWrapper implements Comparable {
        public Id lessonId { get; set; }
        public Id dayId { get; set; }
        public String lessonName { get; set; }
        
        private Datetime createdDate;
        
        public Date dayDate { 
            get {
                if (dayDate == null) {
                    dayDate = Date.today();
                }        
                return dayDate;
            } 
            set; 
        }
        
        public LessonWrapper() { }
        
        public LessonWrapper(Lesson__c lesson) {
            this.lessonId = lesson.id;
            this.dayId = lesson.DayId__c;
            this.lessonName = lesson.Name;
            this.createdDate = lesson.CreatedDate;
        }
        
        public List<LessonWrapper> convertListOfObjectToListOfWrappers(List<Lesson__c> listOfLessons) {
            List<LessonWrapper> listOfLessonsWrappers = new List<LessonWrapper>();
            
            for (Lesson__c lesson : listOfLessons) {
                listOfLessonsWrappers.add(new LessonWrapper(lesson));
            }
            
            return listOfLessonsWrappers;
        }
        
        public Integer compareTo(Object compareTo) {
            LessonWrapper compareToEmp = (LessonWrapper)compareTo;
            if (CreatedDate == compareToEmp.CreatedDate) return 0; 
            if (CreatedDate > compareToEmp.CreatedDate) return 1;
            return -1;       
    	}
    }
    
    public class DayWrapper implements Comparable {
        public Id dayId { get; set; }
        public String name { get; set; }
        public Date dayDate { get; set; }
        
        public DayWrapper() { }
        
        public DayWrapper(Id dayId, String name, Date dayDate) {
            this.dayId = dayId;
            this.name = name;
            this.dayDate = dayDate;
        }
        
        public DayWrapper(Day__c day) {
            this.dayId = day.Id;
            this.name = day.name;
            this.dayDate = day.Date__c;
        }
        
        public List<DayWrapper> convertListOfObjectToListOfWrappers(List<Day__c> listOfDays) {
            List<DayWrapper> listOfDaysWrappers = new List<DayWrapper>();
            
            for (Day__c day : listOfDays) {
                listOfDaysWrappers.add(new DayWrapper(day.id, day.Name, day.Date__c));
            }
            
            return listOfDaysWrappers;
        }
        
        public Boolean equals(Object obj) {
            return dayId == ((DayWrapper)obj).dayId;
		}
        
        public Integer hashCode() {
            return String.valueOf(dayId).hashcode();
        }
        
        public Integer compareTo(Object compareTo) {
            DayWrapper compareToEmp = (DayWrapper)compareTo;
            if (dayDate == compareToEmp.dayDate) return 0; 
            if (dayDate > compareToEmp.dayDate) return 1;
            return -1;       
    	}
    }
}