public class AdminViewController {
    
    public String openDay { get; set; }
    public String lessonToDelete { get; set; }
    
    public Map<DayWrapper, List<LessonWrapper>> mapDaysAndLessonsWrappers { get; set; }   
    
    public Boolean isNewTimetable { 
        get {
            return mapDaysAndLessonsWrappers.isEmpty();
        } 
    }
    
    public Boolean showEditPanel { get; set; }
    public LessonWrapper lessonWr { get; set; }
    public DayWrapper dayWr { get; set; }
    
    public Attachment attachment {
  		get {
      		if (attachment == null)
        		attachment = new Attachment();
      		return attachment;
    	}
        set;
    }
    
    public AdminViewController() {
        // Init
        openDay = '';
        
        lessonWr = new LessonWrapper();
        dayWr = new DayWrapper();
        showEditPanel = false;
        // 
        populateOutputMap();
    }
    
    private void populateOutputMap() {
        mapDaysAndLessonsWrappers = new Map<DayWrapper, List<LessonWrapper>>();         
        List<DayWrapper> listOfDaysWrappers = dayWr.convertListOfObjectToListOfWrappers([SELECT Name, Date__c FROM Day__c]);
        List<LessonWrapper> listOfLessonsWrappers = lessonWr.convertListOfObjectToListOfWrappers([SELECT DayId__c, Name, CreatedDate FROM Lesson__c]);
        for (DayWrapper day : listOfDaysWrappers) {
            for (LessonWrapper lesson : listOfLessonsWrappers) {
                if (lesson.dayId == day.dayId) {
                    if (mapDaysAndLessonsWrappers.containsKey(day)) {
                        mapDaysAndLessonsWrappers.get(day).add(lesson);
                    }
                    else {
                        mapDaysAndLessonsWrappers.put(day, new List<LessonWrapper> { lesson } );
                    }
                }
            }
            
            mapDaysAndLessonsWrappers.get(day).sort();
        }    
    }
    
    public PageReference edit() {
        showEditPanel = true;
        return null;
    }
    
    public PageReference refresh() {
        PageReference pageRef = new PageReference(ApexPages.currentPage().getUrl());
		pageRef.setRedirect(true);
		return pageRef;
    }
    
    public void doSmth() { }
    
    public void doDelete() { 
        Lesson__c lessonToDeleteObj = [SELECT DayId__c FROM Lesson__c WHERE id=:lessonToDelete];     
        Day__c dayOfLessonToDeleteObj = [SELECT id, Name, Date__c FROM Day__c WHERE id=:lessonToDeleteObj.DayId__c];
        
        if (mapDaysAndLessonsWrappers.get(new DayWrapper(dayOfLessonToDeleteObj)).size() == 1) {
            delete dayOfLessonToDeleteObj;
        }
        
        delete lessonToDeleteObj;
        populateOutputMap();
    }
    
    public PageReference add() {
        if (lessonWr.lessonName == '' || lessonWr.dayDate == null) {
            ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.ERROR, 'All fields need to be filled')); 
            return null;
        }
        
        Day__c dayRecord;
        try {
        	dayRecord = [SELECT Name, Date__c, id FROM Day__c WHERE Date__c=:lessonWr.dayDate LIMIT 1];
        } catch(QueryException ex) {
            dayRecord = new Day__c(Name=lessonWr.dayDate.format(), Date__c=lessonWr.dayDate);
            insert dayRecord;
            mapDaysAndLessonsWrappers.put(new DayWrapper(dayRecord), new List<LessonWrapper>() );
        }
        
        openDay = dayRecord.Id;
        Lesson__c lesson = new Lesson__c(Name=lessonWr.lessonName, DayId__c=dayRecord.id);
        insert lesson;     

        mapDaysAndLessonsWrappers.get(new DayWrapper(dayRecord)).add(new LessonWrapper(lesson));

        //
        //attachment.OwnerId = lesson.id;
        attachment.ParentId = lesson.id;
    
        try {
        	insert attachment;
        } catch (DMLException e) {
        	ApexPages.addMessage(new ApexPages.message(ApexPages.severity.ERROR,'Error uploading attachment'));
        } finally {
          attachment = new Attachment(); 
        }
        
        return null;
    }
    
    public class LessonWrapper implements Comparable {
        public Id lessonId { get; set; }
        public Id dayId { get; set; }
        public String lessonName { get; set; }
        
        private Datetime createdDate;
        
        public Date dayDate { 
            get {
                if (dayDate == null) {
                    dayDate = Date.today();
                }        
                return dayDate;
            } 
            set; 
        }
        
        public LessonWrapper() { }
        
        public LessonWrapper(Lesson__c lesson) {
            this.lessonId = lesson.id;
            this.dayId = lesson.DayId__c;
            this.lessonName = lesson.Name;
            this.createdDate = lesson.CreatedDate;
        }
        
        public List<LessonWrapper> convertListOfObjectToListOfWrappers(List<Lesson__c> listOfLessons) {
            List<LessonWrapper> listOfLessonsWrappers = new List<LessonWrapper>();
            
            for (Lesson__c lesson : listOfLessons) {
                listOfLessonsWrappers.add(new LessonWrapper(lesson));
            }
            
            return listOfLessonsWrappers;
        }
        
        public Integer compareTo(Object compareTo) {
            LessonWrapper compareToEmp = (LessonWrapper)compareTo;
            if (CreatedDate == compareToEmp.CreatedDate) return 0; 
            if (CreatedDate > compareToEmp.CreatedDate) return 1;
            return -1;       
    	}
    }
    
    public class DayWrapper implements Comparable {
        public Id dayId { get; set; }
        public String name { get; set; }
        public Date dayDate { get; set; }
        
        public DayWrapper() { }
        
        public DayWrapper(Id dayId, String name, Date dayDate) {
            this.dayId = dayId;
            this.name = name;
            this.dayDate = dayDate;
        }
        
        public DayWrapper(Day__c day) {
            this.dayId = day.Id;
            this.name = day.name;
            this.dayDate = day.Date__c;
        }
        
        public List<DayWrapper> convertListOfObjectToListOfWrappers(List<Day__c> listOfDays) {
            List<DayWrapper> listOfDaysWrappers = new List<DayWrapper>();
            
            for (Day__c day : listOfDays) {
                listOfDaysWrappers.add(new DayWrapper(day.id, day.Name, day.Date__c));
            }
            
            return listOfDaysWrappers;
        }
        
        public Boolean equals(Object obj) {
            return dayId == ((DayWrapper)obj).dayId;
		}
        
        public Integer hashCode() {
            return String.valueOf(dayId).hashcode();
        }
        
        public Integer compareTo(Object compareTo) {
            DayWrapper compareToEmp = (DayWrapper)compareTo;
            if (dayDate == compareToEmp.dayDate) return 0; 
            if (dayDate > compareToEmp.dayDate) return 1;
            return -1;       
    	}
    }
}